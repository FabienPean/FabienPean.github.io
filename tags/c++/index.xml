<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++ on My Personal Website</title><link>https://fabien.pean.pro/tags/c++/</link><description>Recent content in c++ on My Personal Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://fabien.pean.pro/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Missing concept: the quest for `range_of`</title><link>https://fabien.pean.pro/blog/2025/02/missing-concept-the-quest-for-range_of/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2025/02/missing-concept-the-quest-for-range_of/</guid><description>Reeling back a bit What is a range? Let us have a look into the C++20 standard
1 2 3 4 5 template&amp;lt; class T &amp;gt; concept range = requires( T&amp;amp; t ) { ranges::begin(t); // equality-preserving for forward iterators ranges::end (t); }; A range is a C++ concept, a set of constraint, that must be fulfilled for a type to be called range. As per the definition above, any type T that provides valid definition for the calls to ranges::begin and ranges::end.</description></item><item><title>Crafting a versatile generic function using concepts and unexpected pitfalls of implicit ranges</title><link>https://fabien.pean.pro/blog/2024/12/crafting-a-versatile-generic-function-using-concepts-and-unexpected-pitfalls-of-implicit-ranges/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2024/12/crafting-a-versatile-generic-function-using-concepts-and-unexpected-pitfalls-of-implicit-ranges/</guid><description>Context During the course of my work, I was brought to develop a feature where the library user should be able upload a file or folder to a foreign storage. This post goes over my train of thought from a barebone function to a richer interface, covering some common use-cases. For the purpose of this post, upload will be reworded as print, where the argument is output to the console. A minor change, but relatively similar interface.</description></item><item><title>Fastest heterogeneous container and benchmarks</title><link>https://fabien.pean.pro/blog/2020/11/fastest-heterogeneous-container-and-benchmarks/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/11/fastest-heterogeneous-container-and-benchmarks/</guid><description>While doing some benchmarks with the heterogeneous containers described here and here along with some related containers, I could not but notice the performance of entt, more specifically its registry class which relies on a modified sparse set data structure. In front of such witchcraft, I decided to delve behind the curtains and see for myself the performance of an heterogeneous container based on it.
Sparse sets Sparse sets are data structures widely covered (1, 2, 3, 4).</description></item><item><title>WTF C&amp;plus;&amp;plus;</title><link>https://fabien.pean.pro/notes/wtf-cplusplus/</link><pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/notes/wtf-cplusplus/</guid><description>&lt;p>In this page, I enumerate various C++ fragments that sparkled my incomprehension when I encountered them, or made me scratch my head far too long. It is meant to be a reminder mainly for myself and destined to be updated over time.&lt;/p></description></item><item><title>A simple heterogeneous container in C&amp;plus;&amp;plus; without relying on 'variant' nor 'any'</title><link>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</guid><description>&lt;p>In a precedent post, I outlined the implementation of an heterogeneous dynamic array. Let us try now to reflect on what was done to draw some genericity out of it.&lt;/p></description></item><item><title>Implementing an heterogeneous dynamic array in C&amp;plus;&amp;plus;</title><link>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</guid><description>Introduction heterogeneous: consisting of dissimilar or diverse constituents
dynamic array: a dynamic array is a random access, variable-size list data structure that allows elements to be added or removed. [&amp;hellip;] A simple dynamic array can be constructed by allocating an array of fixed-size, typically larger than the number of elements immediately required. The elements of the dynamic array are stored contiguously at the start of the underlying array, [&amp;hellip;]
Heterogeneous containers are data structures wherein elements can be of different types.</description></item></channel></rss>