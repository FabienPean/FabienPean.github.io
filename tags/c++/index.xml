<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on My Personal Website</title>
    <link>https://fabien.pean.pro/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on My Personal Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Aug 2020 20:54:34 +0200</lastBuildDate>
    
	<atom:link href="https://fabien.pean.pro/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WTF C&amp;plus;&amp;plus;</title>
      <link>https://fabien.pean.pro/notes/wtf-cplusplus/</link>
      <pubDate>Sun, 30 Aug 2020 20:54:34 +0200</pubDate>
      
      <guid>https://fabien.pean.pro/notes/wtf-cplusplus/</guid>
      <description>In this page, I enumerate various C++ fragments that sparkled my incomprehension when I encountered them, or made my head scratch far too long. This page is meant to be a reminder mainly for myself and destined to be updated over time.
No implicit conversion for arrays of 1 element 1 2  std::array&amp;lt;int,1&amp;gt; arr {42}; int v = arr; // ‚ùå That&amp;#39;s a no-no   Filesystem library and operator / Operator / does not always act relative to the previous path&amp;hellip; A leading slash is always considered as referring to the root, therefore the input path is considered absolute instead of relative.</description>
    </item>
    
    <item>
      <title>A simple heterogeneous container in C&amp;plus;&amp;plus; without relying on &#39;variant&#39; nor &#39;any&#39;</title>
      <link>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</guid>
      <description>Building an heterogeneous container: basic ingredients In a precedent post, I outlined the implementation of an heterogeneous dynamic array. Let us try now to reflect on what was done to draw some genericity out of it.
The basic ingredients to build an heterogeneous container are:
 data the object ptr where the object is stored: a pointer or offset allowing to find the object in memory tag what is the type of that object: a unique way to identify types at runtime.</description>
    </item>
    
    <item>
      <title>Implementing an heterogeneous dynamic array in C&amp;plus;&amp;plus;</title>
      <link>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</guid>
      <description>Introduction  heterogeneous: consisting of dissimilar or diverse constituents
dynamic array: a dynamic array is a random access, variable-size list data structure that allows elements to be added or removed. [&amp;hellip;] A simple dynamic array can be constructed by allocating an array of fixed-size, typically larger than the number of elements immediately required. The elements of the dynamic array are stored contiguously at the start of the underlying array, [&amp;hellip;]</description>
    </item>
    
  </channel>
</rss>