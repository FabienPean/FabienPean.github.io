<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++20 on My Personal Website</title><link>https://fabien.pean.pro/tags/c++20/</link><description>Recent content in c++20 on My Personal Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://fabien.pean.pro/tags/c++20/index.xml" rel="self" type="application/rss+xml"/><item><title>Missing concept: the quest for `range_of`</title><link>https://fabien.pean.pro/blog/2025/02/missing-concept-the-quest-for-range_of/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2025/02/missing-concept-the-quest-for-range_of/</guid><description>Reeling back a bit What is a range? Let us have a look into the C++20 standard
1 2 3 4 5 template&amp;lt; class T &amp;gt; concept range = requires( T&amp;amp; t ) { ranges::begin(t); // equality-preserving for forward iterators ranges::end (t); }; A range is a C++ concept, a set of constraint, that must be fulfilled for a type to be called range. As per the definition above, any type T that provides valid definition for the calls to ranges::begin and ranges::end.</description></item><item><title>Crafting a versatile generic function using concepts and unexpected pitfalls of implicit ranges</title><link>https://fabien.pean.pro/blog/2024/12/crafting-a-versatile-generic-function-using-concepts-and-unexpected-pitfalls-of-implicit-ranges/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2024/12/crafting-a-versatile-generic-function-using-concepts-and-unexpected-pitfalls-of-implicit-ranges/</guid><description>Context During the course of my work, I was brought to develop a feature where the library user should be able upload a file or folder to a foreign storage. This post goes over my train of thought from a barebone function to a richer interface, covering some common use-cases. For the purpose of this post, upload will be reworded as print, where the argument is output to the console. A minor change, but relatively similar interface.</description></item></channel></rss>