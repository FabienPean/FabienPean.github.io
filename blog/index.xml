<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on My Personal Website</title><link>https://fabien.pean.pro/blog/</link><description>Recent content in Blog on My Personal Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Jul 2020 01:09:17 +0200</lastBuildDate><atom:link href="https://fabien.pean.pro/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Fastest heterogeneous container and benchmarks</title><link>https://fabien.pean.pro/blog/2020/11/fastest-heterogeneous-container-and-benchmarks/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/11/fastest-heterogeneous-container-and-benchmarks/</guid><description>While doing some benchmarks with the heterogeneous containers described here and here along with some related containers, I could not but notice the performance of entt, more specifically its registry class which relies on a modified sparse set data structure. In front of such witchcraft, I decided to delve behind the curtains and see for myself the performance of an heterogeneous container based on it.
Sparse sets Sparse sets are data structures widely covered (1, 2, 3, 4).</description></item><item><title>A simple heterogeneous container in C&amp;plus;&amp;plus; without relying on 'variant' nor 'any'</title><link>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/08/a-simple-heterogeneous-container-in-cplusplus-without-relying-on-variant-nor-any/</guid><description>Building an heterogeneous container: basic ingredients In a precedent post, I outlined the implementation of an heterogeneous dynamic array. Let us try now to reflect on what was done to draw some genericity out of it.
The basic ingredients to build an heterogeneous container are:
data the object ptr where the object is stored: a pointer or offset allowing to find the object in memory tag what is the type of that object: a unique way to identify types at runtime.</description></item><item><title>Implementing an heterogeneous dynamic array in C&amp;plus;&amp;plus;</title><link>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><guid>https://fabien.pean.pro/blog/2020/07/implementing-an-heterogeneous-dynamic-array-in-cplusplus/</guid><description>Introduction heterogeneous: consisting of dissimilar or diverse constituents
dynamic array: a dynamic array is a random access, variable-size list data structure that allows elements to be added or removed. [&amp;hellip;] A simple dynamic array can be constructed by allocating an array of fixed-size, typically larger than the number of elements immediately required. The elements of the dynamic array are stored contiguously at the start of the underlying array, [&amp;hellip;]</description></item></channel></rss>